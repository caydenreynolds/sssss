import 'package:flutter/material.dart';
import 'package:snek/login.dart';
import 'package:snek/ping.dart';
import 'package:snek/proto/auth.pb.dart';

import 'fang.dart';
import 'test_struct.dart';
import 'package:file_picker/file_picker.dart';
import 'test_comp.dart';
import 'dart:io';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.deepPurple,
      ),
      darkTheme: ThemeData(
        canvasColor: Colors.black,
        primarySwatch: Colors.deepPurple,
        textTheme: Typography.whiteCupertino,
        errorColor: Colors.red,
        hintColor: Colors.white38,
        inputDecorationTheme: const InputDecorationTheme (
          enabledBorder: OutlineInputBorder(borderSide: BorderSide (
            color: Colors.white38,
          )),
          focusedBorder: OutlineInputBorder(borderSide: BorderSide(
            color: Colors.deepPurple,
          )),
        )
      ),
      themeMode: ThemeMode.dark,
      home: MyHomePage(title: "asdf"),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key? key, required this.title}) : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

double nativeSerTest() {
  final start = DateTime.now().microsecondsSinceEpoch;
  for (var element in Iterable.generate(1000)) {
    var msg = TestMessage().toJsonNative();
    if (element == 0) {
      print("json size: ${msg.length}");
    }
  }
  final end = DateTime.now().microsecondsSinceEpoch;
  return (end - start) / 1000.0;
}

double nativeProtoSerTest() {
  final start = DateTime.now().microsecondsSinceEpoch;
  for (var element in Iterable.generate(1000)) {
    var msg = TestMessage().toJsonProtobuf();
    if (element == 0) {
      print("Proto size: ${msg.length}");
    }
  }
  final end = DateTime.now().microsecondsSinceEpoch;
  return (end - start) / 1000.0;
}

// Future<double> wasmSerTest() async {
//   final start = DateTime.now().microsecondsSinceEpoch;
//   for (var _ in Iterable.generate(1000000)) {
//     await TestMessage().toJsonWasm(1);
//   }
//   final end = DateTime.now().microsecondsSinceEpoch;
//   return (end - start) / 1000.0;
// }

double nativeDefTest(List<int> bytes) {
  final start = DateTime.now().microsecondsSinceEpoch;
  for (var element in Iterable.generate(10)) {
    print("working natively");
    final data = deflate(bytes);
    if (element == 9) {
      print("Original size: ${bytes.length}, Final size: ${data.length}");
    }
  }
  final end = DateTime.now().microsecondsSinceEpoch;
  return (end - start) / 1000.0;
}

Future<double> wasmDefTest(List<int> bytes) async {
  final start = DateTime.now().microsecondsSinceEpoch;
  for (var element in Iterable.generate(10)) {
    print("working wasmily");
    final data = await fangDeflate(bytes);
    if (element == 9) {
      print("Original size: ${bytes.length}, Final size: ${data.length}");
    }
  }
  final end = DateTime.now().microsecondsSinceEpoch;
  return (end - start) / 1000.0;
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;
  // final Future<String> _title = fangToJson("I'm a fun little string!", 12, "string d", "there are some who call me tim", "string4", "ur mom", "no u");
  // final Future<String> _title = TestMessage().toJsonWasm();
  // final Future<double> _wasmTime = wasmDefTest();
  Future<FilePickerResult?>? _filePath;
  Future<String> pinged_string = ping("This string got ping'd");
  AuthToken? _token;
  // Stream<String> _pingedStream = pingStream();
  // List<String> _pingedMessages = [];

  // _MyHomePageState() {
  //   _addMessagesAsync();
  // }

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
      _filePath = FilePicker.platform.pickFiles();
    });
  }

  // void _addMessagesAsync() async {
  //   await for (String msg in _pingedStream) {
  //     setState(() {
  //       _pingedMessages.add(msg);
  //     });
  //   }
  // }


  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        // title: FutureBuilder<String>(
        //   future: _title,
        //   builder: (BuildContext context, AsyncSnapshot<String> snapshot) {
        //     return Text(snapshot.data.toString());
        //   }
        // )
      ),
      body: Container(
        alignment: Alignment.center,
        child: LoginPage(
            callback: (token) => setState(() => _token = token)
        ),
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        // child: Column(
        //   // Column is also a layout widget. It takes a list of children and
        //   // arranges them vertically. By default, it sizes itself to fit its
        //   // children horizontally, and tries to be as tall as its parent.
        //   //
        //   // Invoke "debug painting" (press "p" in the console, choose the
        //   // "Toggle Debug Paint" action from the Flutter Inspector in Android
        //   // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
        //   // to see the wireframe for each widget.
        //   //
        //   // Column has various properties to control how it sizes itself and
        //   // how it positions its children. Here we use mainAxisAlignment to
        //   // center the children vertically; the main axis here is the vertical
        //   // axis because Columns are vertical (the cross axis would be
        //   // horizontal).
        //   mainAxisAlignment: MainAxisAlignment.center,
        //   children: <Widget>[
        //     Text("Native JSON took ${nativeSerTest()} ms to process"),
        //     Text("Native protobuf took ${nativeProtoSerTest()} ms to process"),
        //     FutureBuilder<String>(
        //         future: pinged_string,
        //       builder: (BuildContext ctx, AsyncSnapshot<String> snapshot) {
        //           return Text(snapshot.data.toString());
        //       },
        //     ),
        //     // Column(
        //     //   mainAxisAlignment: MainAxisAlignment.center,
        //     //   children: _pingedMessages.map((e) => Text(e)).toList(),
        //     // ),
        //
        //     // FutureBuilder<FilePickerResult?>(
        //     //   future: _filePath,
        //     //   builder: (BuildContext context, AsyncSnapshot<FilePickerResult?> snapshot) {
        //     //     final data = snapshot.data;
        //     //     if (data != null) {
        //     //       final bytes = data.files.single.bytes;
        //     //       if (bytes != null) {
        //     //         final time = nativeDefTest(bytes);
        //     //         return Text('Spent $time ms serializing natively');
        //     //       }
        //     //     }
        //     //     return const Text("File picker failed");
        //     //   },
        //     // ),
        //     // FutureBuilder<FilePickerResult?>(
        //     //   future: _filePath,
        //     //   builder: (BuildContext context, AsyncSnapshot<FilePickerResult?> snapshot) {
        //     //     final data = snapshot.data;
        //     //     if (data != null) {
        //     //       final bytes = data.files.single.bytes;
        //     //       if (bytes != null) {
        //     //         final time = wasmDefTest(bytes);
        //     //         return FutureBuilder<double>(
        //     //           future: time,
        //     //           builder: (BuildContext context, AsyncSnapshot<double?> snapshot2) {
        //     //             final time = snapshot2.data;
        //     //             return Text('Spent $time ms serializing wasmily');
        //     //           },
        //     //         );
        //     //
        //     //       }
        //     //     }
        //     //     return const Text("File picker failed");
        //     //   },
        //     // ),
        //     const Text(
        //       'You have pushed the button this many times:',
        //     ),
        //     Text(
        //       '$_counter',
        //       style: Theme.of(context).textTheme.headline4,
        //     ),
        //   ],
        // ),
      ),
      // floatingActionButton: FloatingActionButton(
      //   onPressed: _incrementCounter,
      //   tooltip: 'Upload',
      //   child: const Icon(Icons.file_upload_outlined),
      // ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
